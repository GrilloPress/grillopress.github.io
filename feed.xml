<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andrew Duckworth</title>
  <subtitle>Designer, artist</subtitle>
  <id>https://grillopress.github.io/</id>
  <link href="https://grillopress.github.io/"/>
  <link href="https://grillopress.github.io/feed.xml" rel="self"/>
  <updated>2019-03-18T20:30:00+00:00</updated>
  <author>
    <name>Andrew Duckworth</name>
  </author>
  <entry>
    <title>Do the hard work to make it inclusive</title>
    <link rel="alternate" href="https://grillopress.github.io/2019/03/18/do-the-hard-work-to-make-it-inclusive.html"/>
    <id>https://grillopress.github.io/2019/03/18/do-the-hard-work-to-make-it-inclusive.html</id>
    <published>2019-03-18T20:30:00+00:00</published>
    <updated>2019-03-19T08:23:51+00:00</updated>
    <author>
      <name>Andrew Duckworth</name>
    </author>
    <content type="html">&lt;p&gt;Back in August we had a challenge. We had a method of authentication that worked pretty well, but needed an NHS number.&lt;/p&gt;

&lt;p&gt;If you have your NHS number we could be pretty sure to find you.&lt;/p&gt;

&lt;p&gt;But NHS numbers aren’t something that everyone has to hand.&lt;/p&gt;

&lt;p&gt;They should be on letters, prescriptions and the like.&lt;/p&gt;

&lt;p&gt;But not everyone has had a recent appointment. Or keeps their letters. And some letters don’t include the NHS number (even though they should!). Never mind the NHS number being easy to find on a letter.&lt;/p&gt;

&lt;p&gt;Though not a thing some users can’t get. Many users told us that they contacted their GP receptionist and after a few questions for given it. The NHS number represented a significant speed bump.&lt;/p&gt;

&lt;p&gt;Something that stopped users being successful first time. And in the worst cases, a potential barrier.&lt;/p&gt;

&lt;p&gt;Our challenge was to make accessing the service not rely on the NHS number.&lt;/p&gt;

&lt;p&gt;But I didn’t want to throw away our path that worked for many.&lt;/p&gt;

&lt;p&gt;The API we used however offered an alternative. We could get a patient by NHS number, but also by their personal details.&lt;/p&gt;

&lt;p&gt;The details were:&lt;/p&gt;

&lt;p&gt;name
date of birth
postcode&lt;/p&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;p&gt;gender&lt;/p&gt;

&lt;p&gt;Name and date of birth confronted no significant issues. We knew some users would struggle a little with postcode.&lt;/p&gt;

&lt;p&gt;But the biggest worry was gender.&lt;/p&gt;

&lt;p&gt;The reason the API asked for that was because it was a clinical API.&lt;/p&gt;

&lt;p&gt;It was a requirement for the API. No “wildcard” allowed. We’d need to ask for it.&lt;/p&gt;

&lt;p&gt;We were also told we couldn’t get around this.&lt;/p&gt;

&lt;p&gt;Though we knew many users wouldn’t blink at this question. Our service lets users choose if their data is used for research. We don’t want to embarrass or impede anyone making that choice.&lt;/p&gt;

&lt;p&gt;Our service is for everyone.&lt;/p&gt;

&lt;h2&gt;New hope&lt;/h2&gt;

&lt;p&gt;In a meeting with colleagues from another service I noticed they used the same API. But weren’t asking for gender.&lt;/p&gt;

&lt;p&gt;I pressed hard on how they got around it.&lt;/p&gt;

&lt;p&gt;Email confirmation after the meeting we had an answer.&lt;/p&gt;

&lt;p&gt;We could call the API several times for each gender or category stored.&lt;/p&gt;

&lt;p&gt;The other service would have much higher traffic than ours. We had precedence and I had enough ammunition to get my way.&lt;/p&gt;

&lt;p&gt;So, our service would do the hard work to call the API four times when a user gave us a postcode instead of an NHS number.&lt;/p&gt;

&lt;p&gt;Several prototypes later, 800 a/b tested users later and we had confidence in our design.&lt;/p&gt;

&lt;p&gt;Service redesigned. Service load tested. New way of using the service released.&lt;/p&gt;

&lt;p&gt;Over one third of our users don’t bother with an irrelevant question.&lt;/p&gt;

&lt;p&gt;Our service does the hard work to make it inclusive.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>One thing per page</title>
    <link rel="alternate" href="https://grillopress.github.io/2019/01/31/one-thing.html"/>
    <id>https://grillopress.github.io/2019/01/31/one-thing.html</id>
    <published>2019-01-31T20:30:00+00:00</published>
    <updated>2019-02-11T08:21:50+00:00</updated>
    <author>
      <name>Andrew Duckworth</name>
    </author>
    <content type="html">&lt;p&gt;Advice that often causes some debate is doing &amp;ldquo;one thing per page&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.gov.uk/service-manual/design/form-structure#start-with-one-thing-per-page"&gt;advice to start with this pattern&lt;/a&gt; often runs into resistance for internal teams. Or products with &amp;ldquo;expert&amp;rdquo; users.&lt;/p&gt;

&lt;p&gt;Whilst helping run a form workshop for &amp;ldquo;services week&amp;rdquo; this topic featured. Both in the wider room and one to one.&lt;/p&gt;

&lt;p&gt;The argument is that lots of questions will slow down users who have to do a thing 50 times a day.&lt;/p&gt;

&lt;p&gt;This is a fair criticism.&lt;/p&gt;

&lt;p&gt;If your users use an interface everyday, the patterns that work for them may be different.&lt;/p&gt;

&lt;p&gt;For me though, I like to explain the &amp;ldquo;one thing&amp;rdquo; a little differently.&lt;/p&gt;

&lt;p&gt;That is, &amp;ldquo;one thing&amp;rdquo; is a flexible concept. Yes, it can mean one question or one input. But one thing can also mean several inputs but one concept.&lt;/p&gt;

&lt;p&gt;For a user who submits identical claims 50 times a day the whole &amp;ldquo;claim&amp;rdquo; could be one thing. A user who uses your service once a year won&amp;rsquo;t have the whole thing in their head.&lt;/p&gt;

&lt;p&gt;The question isn&amp;rsquo;t &amp;ldquo;should we do one thing or lots of things?&amp;rdquo;. It is establishing what task users want to do. What sized task they can do without having to think.&lt;/p&gt;

&lt;p&gt;The question isn&amp;rsquo;t whether your user should do &amp;ldquo;one thing&amp;rdquo; or not. It is what that one thing means.&lt;/p&gt;

&lt;p&gt;The worst thing you can do though is assume that your users can cope with several things per page without evidence.&lt;/p&gt;

&lt;p&gt;A little while back I reviewed a team&amp;rsquo;s service. They had some serious issues with users struggling to complete their registration process. They tried to cover this with a &amp;ldquo;save and continue&amp;rdquo; button.&lt;/p&gt;

&lt;p&gt;But the solution was solving the symptom.&lt;/p&gt;

&lt;p&gt;The issue was that they were assuming too much. Assuming that their users would understand the questions they were asking.&lt;/p&gt;

&lt;p&gt;They had rejected the &amp;ldquo;one thing per page&amp;rdquo; pattern as needing &amp;ldquo;too many clicks&amp;rdquo;. But had they used it, they would have discovered the questions that users found easy. And those they found hard. Those questions that could grouped. And those that needed another page.&lt;/p&gt;

&lt;p&gt;Users were struggling on the third question into the service. They had assumed their professional users would know the answer to these questions. They didn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Start by breaking down what you need from your user into the smallest questions possible. Only deviate when you have good evidence you can group questions together.&lt;/p&gt;

&lt;p&gt;Start with one thing per page. The smallest thing. And only expand when you have clear evidence to do that. But also find out what that &amp;ldquo;one thing&amp;rdquo; means. And the best way to ask it. Whether it is one question or several.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ask a question</title>
    <link rel="alternate" href="https://grillopress.github.io/2019/01/31/asking-questions.html"/>
    <id>https://grillopress.github.io/2019/01/31/asking-questions.html</id>
    <published>2019-01-31T00:00:00+00:00</published>
    <updated>2019-01-31T22:55:32+00:00</updated>
    <author>
      <name>Andrew Duckworth</name>
    </author>
    <content type="html">&lt;p&gt;One thing I’m always doing is encouraging people to ask questions.&lt;/p&gt;

&lt;p&gt;Asking why. Asking how.&lt;/p&gt;

&lt;p&gt;It’s fundamental to being a good designer. We provide purpose and direction. But only after questions.&lt;/p&gt;

&lt;p&gt;The questions you ask don’t have to be clever. And they don’t have to have deep purpose beyond knowing a bit more. Getting a bit clearer or checking if you have something right.&lt;/p&gt;

&lt;p&gt;A great example of this recently is one asked by Sam (graduate designer I work with) in the cross-gov community.&lt;/p&gt;

&lt;p&gt;She had been exploring how we could provide our contact centre with a way to speed up creating reports.&lt;/p&gt;

&lt;p&gt;One of the things we wanted to do was make sure we had clear checks that the report about to be created matched the paper form.&lt;/p&gt;

&lt;p&gt;She made a quick sketch flow. Then mocked up a quick screen. As we reviewed it we felt we could probably do better.&lt;/p&gt;

&lt;figure class="noir right"&gt;
  &lt;img src="/images/question.png" alt="A sketch on a sticky note of a question and address."/&gt;
&lt;/figure&gt;

&lt;p&gt;We soon had three versions.&lt;/p&gt;

&lt;p&gt;The screens all asked the user to confirm some personal data matched the request.&lt;/p&gt;

&lt;p&gt;As we considered the best approach I suggested Sam ask if anyone had had to do something similar in the cross-gov slack.&lt;/p&gt;

&lt;p&gt;Turned out lots of people had had to do it. And there were a few variations flying around.&lt;/p&gt;

&lt;p&gt;So much so &lt;a href="https://github.com/alphagov/govuk-design-system-backlog/issues/187"&gt;it&amp;rsquo;s now on the design system backlog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple question and we got lots of examples and research back.&lt;/p&gt;

&lt;p&gt;Ask your question. Find out why a process is how it is. See if anyone has tried solving the same problem or created a similar solution.&lt;/p&gt;

&lt;p&gt;And better yet, ask that question publicly so you help everyone else too.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Asking the right question</title>
    <link rel="alternate" href="https://grillopress.github.io/2019/01/20/asking-the-right-question.html"/>
    <id>https://grillopress.github.io/2019/01/20/asking-the-right-question.html</id>
    <published>2019-01-20T00:00:00+00:00</published>
    <updated>2019-01-20T17:41:06+00:00</updated>
    <author>
      <name>Andrew Duckworth</name>
    </author>
    <content type="html">&lt;p&gt;The key to getting to a good solution is in asking the right questions.&lt;/p&gt;

&lt;p&gt;Recently my son came into the kitchen where I was cooking. He wanted to ask me how to do something in his Minecraft mod.&lt;/p&gt;

&lt;p&gt;He wanted to know how create a DNA extractor.&lt;/p&gt;

&lt;p&gt;I was in the middle of making some naan breads so couldn&amp;rsquo;t google it for him that second. When I tried to find the answer I couldn&amp;rsquo;t find the extractor. It didn&amp;rsquo;t seem to exist.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t odd in Minecraft. Most mods aren&amp;rsquo;t well documented.&lt;/p&gt;

&lt;p&gt;Frustrated I told him I couldn&amp;rsquo;t find it. I asked him why he wanted the extractor. What it&amp;rsquo;d let him do. Turned out one of his dinosaurs had died. He wanted to create it again and only had the meat left over from the last one.&lt;/p&gt;

&lt;p&gt;He didn&amp;rsquo;t want a DNA extractor. He wanted his dinosaur back. And he had some raw materials to use but no way of getting a new dinosaur.&lt;/p&gt;

&lt;p&gt;I googled about the dinosaur meat. I found the answer in about 30 seconds. He can use the meat to get the DNA he wanted with tools he already had.&lt;/p&gt;

&lt;p&gt;He was happy. So was I.&lt;/p&gt;

&lt;p&gt;It also made me realise how I should have been asking why he wanted the thing in the first place. What outcome he wanted and why.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not always about being resourceful. It&amp;rsquo;s often about asking the right questions. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Offline services and paper forms</title>
    <link rel="alternate" href="https://grillopress.github.io/2019/01/10/doing-paper-forms.html"/>
    <id>https://grillopress.github.io/2019/01/10/doing-paper-forms.html</id>
    <published>2019-01-10T00:00:00+00:00</published>
    <updated>2019-01-15T16:19:08+00:00</updated>
    <author>
      <name>Andrew Duckworth</name>
    </author>
    <content type="html">&lt;p&gt;I wrote up some notes for someone to recap the advice I would give myself if I was doing the paper forms for the service again. Here they are.&lt;/p&gt;

&lt;h2&gt;Things to do or think about&lt;/h2&gt;

&lt;h3&gt;Review current or similar services&lt;/h3&gt;

&lt;p&gt;Review the current service’s offline route. Or, if none, find the most similar service with current offline processes.&lt;/p&gt;

&lt;p&gt;Think things with similar needs to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prove address&lt;/li&gt;
&lt;li&gt;prove name&lt;/li&gt;
&lt;li&gt;financial history (bursaries?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Talk to the service owners about issues. System side and user side. Talk to the contact centre and what themes they get (back that up with data as well).&lt;/p&gt;

&lt;p&gt;Remember that you’re not just prototyping the form. But the process. So, letters, emails and call scripts. Before, during and after submission.&lt;/p&gt;

&lt;p&gt;Get permission to go through filled-in forms. Review in a team submissions and note things that work well and don’t work.&lt;/p&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sticky notes&lt;/li&gt;
&lt;li&gt;pens&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And write down notes, collect and analyse like you would a user lab.&lt;/p&gt;

&lt;p&gt;Collecting observations and notes. Make sure to make extra notes where people have crossed things out and filled in their own answers as well as mistakes and misunderstandings.&lt;/p&gt;

&lt;p&gt;People in this session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;researchers&lt;/li&gt;
&lt;li&gt;designers&lt;/li&gt;
&lt;li&gt;service owner&lt;/li&gt;
&lt;li&gt;product owner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And anyone else you can get in the room. It is a rewarding but slow process. Be sure to draft in lots of assistance and help.&lt;/p&gt;

&lt;p&gt;Feedback findings to contact centre team and those involved currently for things to implement or solve quickly.&lt;/p&gt;

&lt;h3&gt;Review your questions&lt;/h3&gt;

&lt;p&gt;Start from the beginning. You have your user needs and outcome they want to achieve. Ask what you need to get from them to help them achieve their goal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://grillopress.github.io/2018/12/05/questions-for-your-questions.html"&gt;Conduct a thorough question review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep these questions and answers in a spreadsheet. Yep. A spreadsheet.&lt;/p&gt;

&lt;p&gt;Be sure to use their language not yours.&lt;/p&gt;

&lt;p&gt;Remember that offline services can’t give instant validation. Clear instructions are key. But also remember that users can’t be redirected to the correct parts of a service as clearly either.&lt;/p&gt;

&lt;h3&gt;Make prototypes early and often&lt;/h3&gt;

&lt;p&gt;Typically you should aim to prototype:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;paper form/s (you may need more than one)&lt;/li&gt;
&lt;li&gt;page paper form will live on (standalone or on the service)&lt;/li&gt;
&lt;li&gt;guidance document if needed (people don’t read these so keep it light)&lt;/li&gt;
&lt;li&gt;call script&lt;/li&gt;
&lt;li&gt;introduction letters or emails&lt;/li&gt;
&lt;li&gt;letters or emails informing the user of an error&lt;/li&gt;
&lt;li&gt;letters or emails confirming receipt of submission&lt;/li&gt;
&lt;li&gt;letters or emails confirming success&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlike a digital service, it is extremely easy to rapidly prototype paper forms and make them live.&lt;/p&gt;

&lt;p&gt;Unless you are great at things like Adobe InDesign, rapidly prototype with Microsoft Word.&lt;/p&gt;

&lt;p&gt;Share liberally.&lt;/p&gt;

&lt;p&gt;Placement will go funny often but the key is being able to create lots of versions quickly that you can put in front of people.&lt;/p&gt;

&lt;p&gt;We got to version 21 before we were happy enough to publish one.&lt;/p&gt;

&lt;p&gt;Remember that you’re not just prototyping the form. But the process. So, letters, emails and call scripts. Before, during and after submission need designing too.&lt;/p&gt;

&lt;h3&gt;Get testing your process&lt;/h3&gt;

&lt;p&gt;Paper is cheap. Get testing questions and assumptions often. Test by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;doing quick crits inside your organisation&lt;/li&gt;
&lt;li&gt;getting call handlers and contact centre staff to fill it in&lt;/li&gt;
&lt;li&gt;doing pop-ups with similar users (Keep pop-up lightweight)&lt;/li&gt;
&lt;li&gt;in labs where you can explore the whole journey end to end&lt;/li&gt;
&lt;li&gt;in context. Home, office or similar&lt;/li&gt;
&lt;li&gt;getting call handlers in the lab with you and simulating any phone conversations or emails&lt;/li&gt;
&lt;li&gt;sending out early prototypes through the post to people on research panels (after they have agreed to do that, obviously!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And be sure to test with people:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with access needs&lt;/li&gt;
&lt;li&gt;on the go or working away from a home address&lt;/li&gt;
&lt;li&gt;with non-nuclear family structures&lt;/li&gt;
&lt;li&gt;with two addresses, no address or a difficult one (canal boat)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get reviews from the wider organisation and experts and helpful friends around the design community.&lt;/p&gt;

&lt;p&gt;As well as how well the form will help the user get what they want, ask:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how will they find the offline service&lt;/li&gt;
&lt;li&gt;what conditions they would use it&lt;/li&gt;
&lt;li&gt;how they will find the documents they need&lt;/li&gt;
&lt;li&gt;where they would send the form&lt;/li&gt;
&lt;li&gt;what standard of post&lt;/li&gt;
&lt;li&gt;when and how they expect to hear back&lt;/li&gt;
&lt;li&gt;how they would print the form or related documents off (if needed)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Key design principles&lt;/h2&gt;

&lt;h3&gt;Design for context&lt;/h3&gt;

&lt;p&gt;Remember your user is not able to know they’re filling in things right. Keep instructions clear.&lt;/p&gt;

&lt;p&gt;Don’t try to ask two things in one question.&lt;/p&gt;

&lt;p&gt;Keep addresses, emails and phone numbers clear. Expect pages to go lost or not to be read correctly.&lt;/p&gt;

&lt;p&gt;Know that users won’t have clear cut relationships and situations.&lt;/p&gt;

&lt;p&gt;People divorce. Never get married in the first place. Move address. Keep old addresses in certain systems. Work far away from their “home” address. Live on a boat.&lt;/p&gt;

&lt;p&gt;People also don’t print stuff out that often either. Find out how people will do that.&lt;/p&gt;

&lt;h3&gt;Consistent not uniform&lt;/h3&gt;

&lt;p&gt;Your offline service should try to match your online service in name and solving the same need.&lt;/p&gt;

&lt;p&gt;Don’t have a different name for the service, but do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change questions if they make more sense offline&lt;/li&gt;
&lt;li&gt;provide additional information you may not on a screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don’t need to match any online service completely. Deviate where it makes sense.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Explaining a thing over saying a thing</title>
    <link rel="alternate" href="https://grillopress.github.io/2018/12/29/explaining-a-thing-over-saying-the-thing.html"/>
    <id>https://grillopress.github.io/2018/12/29/explaining-a-thing-over-saying-the-thing.html</id>
    <published>2018-12-29T00:00:00+00:00</published>
    <updated>2018-12-30T17:17:46+00:00</updated>
    <author>
      <name>Andrew Duckworth</name>
    </author>
    <content type="html">&lt;p&gt;Explaining what something is is almost always better than using a technical term for it.&lt;/p&gt;

&lt;p&gt;Don’t use complicated, specialist language in a service.&lt;/p&gt;

&lt;p&gt;Even audiences you think will know what a word means will benefit from explaining a thing.&lt;/p&gt;

&lt;p&gt;Avoid complex phrases unless you have clear and unambiguous proof.&lt;/p&gt;

&lt;p&gt;Designing in the world of data, privacy and medical records you often have complicated concepts. And equally complicated terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anonymisation&lt;/li&gt;
&lt;li&gt;Pseudonymisation&lt;/li&gt;
&lt;li&gt;Data minimisation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In user research we see the negative reaction to these terms. Users find them confusing. Or evasive. And they are.&lt;/p&gt;

&lt;p&gt;Instead of saying anonymisation, talk about information that has personal details removed. And give examples.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we share your information with another organisation, we remove all personal details such as your name and address&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Being open and clear isn’t without problems. Exposing how you use someone else’s data can be problematic. But it’s the truth. And you shouldn’t be processing data without good reason.&lt;/p&gt;

&lt;p&gt;Technical terms or metaphors are always the worst choice.&lt;/p&gt;

&lt;p&gt;Explain the thing. Your service or product will benefit from it.&lt;/p&gt;
</content>
  </entry>
</feed>
